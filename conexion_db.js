import { config } from 'dotenv'
import { PrismaClient } from '@prisma/client'

// Cargar variables de entorno manualmente
import {existsSync} from "fs";

config()

console.log('üîß DIAGN√ìSTICO : CONEXI√ìN BASE DE DATOS')
console.log('=' .repeat(50))

// 1. Verificar variables de entorno
console.log('üìã PASO 1: Verificando variables de entorno...')
const dbUrl = process.env.DATABASE_URL

if (!dbUrl) {
    console.log('‚ùå DATABASE_URL no encontrada en variables de entorno')
    console.log('üîç Verificaciones:')
    console.log('   - ¬øExiste archivo .env en la ra√≠z?')
    console.log('   - ¬øTiene el formato correcto?')
    console.log('   - ¬øEst√° siendo cargado correctamente?')
    process.exit(1)
}

// Mostrar URL censurada
const urlSafe = dbUrl.replace(/:([^:@]+)@/, ':***@')
console.log('‚úÖ DATABASE_URL encontrada:', urlSafe)

// 2. Parsear URL para verificar componentes
console.log('\nüìã PASO 2: Analizando componentes de la URL...')
try {
    const url = new URL(dbUrl)
    console.log('   - Protocolo:', url.protocol)
    console.log('   - Host:', url.hostname)
    console.log('   - Puerto:', url.port || 'default (5432)')
    console.log('   - Usuario:', url.username || 'no especificado')
    console.log('   - Base de datos:', url.pathname.slice(1))
    console.log('   - Contrase√±a:', url.password ? '***' : 'no especificada')
} catch (error) {
    console.log('‚ùå Error parseando DATABASE_URL:', error.message)
    console.log('üîç Verificar formato: postgresql://usuario:contrase√±a@host:puerto/database')
    process.exit(1)
}

// 3. Intentar conexi√≥n b√°sica con Prisma
console.log('\nüìã PASO 3: Probando conexi√≥n con Prisma...')
const prisma = new PrismaClient({
    log: ['error', 'warn'],
})

async function testConnection() {
    try {
        // Test b√°sico de conexi√≥n
        console.log('   üîÑ Conectando...')
        await prisma.$connect()
        console.log('   ‚úÖ Conexi√≥n establecida exitosamente')

        // Test de query simple
        console.log('   üîÑ Probando query b√°sica...')
        const result = await prisma.$queryRaw`SELECT NOW() as current_time`
        console.log('   ‚úÖ Query ejecutada:', result[0].current_time)

        // Verificar tablas existentes
        console.log('   üîÑ Verificando esquema...')
        const tables = await prisma.$queryRaw`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        `

        if (tables.length === 0) {
            console.log('   ‚ö†Ô∏è  No hay tablas en la base de datos')
            console.log('   üí° Ejecutar: npx prisma db push')
        } else {
            console.log('   ‚úÖ Tablas encontradas:')
            tables.forEach(table => console.log(`      - ${table.table_name}`))
        }

        // Intentar contar propiedades
        try {
            const propertyCount = await prisma.property.count()
            console.log(`   üìä Total de propiedades: ${propertyCount}`)
        } catch (error) {
            console.log('   ‚ö†Ô∏è  Error accediendo tabla property:', error.message)
            console.log('   üí° Posible problema: esquema no sincronizado')
        }

    } catch (error) {
        console.log('‚ùå ERROR DE CONEXI√ìN:')
        console.log('   Tipo:', error.constructor.name)
        console.log('   Mensaje:', error.message)

        // Diagn√≥sticos espec√≠ficos por tipo de error
        if (error.message.includes('authentication failed')) {
            console.log('\nüéØ SOLUCIONES POSIBLES:')
            console.log('   1. Verificar usuario/contrase√±a en DATABASE_URL')
            console.log('   2. Crear usuario en PostgreSQL si no existe')
            console.log('   3. Verificar permisos del usuario')
        } else if (error.message.includes('could not connect')) {
            console.log('\nüéØ SOLUCIONES POSIBLES:')
            console.log('   1. Verificar que PostgreSQL est√© corriendo')
            console.log('   2. Verificar host y puerto en DATABASE_URL')
            console.log('   3. Verificar firewall/conexi√≥n de red')
        } else if (error.message.includes('database') && error.message.includes('does not exist')) {
            console.log('\nüéØ SOLUCIONES POSIBLES:')
            console.log('   1. Crear la base de datos manualmente')
            console.log('   2. Verificar nombre de la BD en DATABASE_URL')
        }

        console.log('\nüõ†Ô∏è  COMANDOS √öTILES:')
        console.log('   - Crear BD: createdb nombre_base_datos')
        console.log('   - Conectar: psql -d nombre_base_datos')
        console.log('   - Sincronizar esquema: npx prisma db push')
        console.log('   - Regenerar cliente: npx prisma generate')
    } finally {
        await prisma.$disconnect()
        console.log('\nüëã Desconectado de la base de datos')
    }
}

// Ejecutar diagn√≥stico
testConnection()

// 4. Mostrar informaci√≥n adicional del sistema
console.log('\nüìã INFORMACI√ìN DEL SISTEMA:')
console.log('   - Node.js:', process.version)
console.log('   - Directorio:', process.cwd())
console.log('   - Plataforma:', process.platform)
console.log('   - Archivo .env existe:', existsSync('.env') ? 'S√ç' : 'NO')